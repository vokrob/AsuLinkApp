import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    ActivityIndicator,
    Alert,
    Image,
    ScrollView,
} from 'react-native';
import { checkEmailStatus, resendConfirmation } from '../services/api';

interface EmailConfirmationScreenProps {
    navigation: any;
    route: any;
}

const EmailConfirmationScreen: React.FC<EmailConfirmationScreenProps> = ({ navigation, route }) => {
    const [isLoading, setIsLoading] = useState(false);
    const [isChecking, setIsChecking] = useState(false);
    const [emailStatus, setEmailStatus] = useState<any>(null);
    
    // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const email = route.params?.email || '';
    const username = route.params?.username || '';

    useEffect(() => {
        if (email) {
            checkStatus();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            const interval = setInterval(checkStatus, 10000);
            return () => clearInterval(interval);
        }
    }, [email]);

    const checkStatus = async () => {
        if (!email) return;
        
        try {
            setIsChecking(true);
            const status = await checkEmailStatus(email);
            setEmailStatus(status);
            
            // –ï—Å–ª–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
            if (status.email_confirmed && status.can_login) {
                Alert.alert(
                    '‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!',
                    '–í–∞—à email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
                    [
                        {
                            text: '–í–æ–π—Ç–∏',
                            onPress: () => navigation.replace('Login')
                        }
                    ]
                );
            }
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        } finally {
            setIsChecking(false);
        }
    };

    const handleResendEmail = async () => {
        if (!email) return;
        
        try {
            setIsLoading(true);
            await resendConfirmation(email);
            Alert.alert(
                'üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                '–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.',
                [{ text: 'OK' }]
            );
        } catch (error: any) {
            Alert.alert(
                '–û—à–∏–±–∫–∞',
                error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                [{ text: 'OK' }]
            );
        } finally {
            setIsLoading(false);
        }
    };

    const handleBackToLogin = () => {
        navigation.replace('Login');
    };

    return (
        <ScrollView style={styles.container} contentContainerStyle={styles.scrollContent}>
            <View style={styles.topContainer}>
                <Image
                    source={require('../../assets/logo.png')}
                    style={styles.logo}
                />
                <Text style={styles.title1}>–ê–õ–¢–ê–ô–°–ö–ò–ô –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢</Text>
                <Text style={styles.title2}>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï EMAIL</Text>
            </View>

            <View style={styles.middleContainer}>
                <View style={styles.emailIcon}>
                    <Text style={styles.emailIconText}>üìß</Text>
                </View>

                <Text style={styles.mainMessage}>
                    –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
                </Text>

                <View style={styles.emailInfo}>
                    <Text style={styles.emailLabel}>Email:</Text>
                    <Text style={styles.emailValue}>{email}</Text>
                    {username && (
                        <>
                            <Text style={styles.emailLabel}>Username:</Text>
                            <Text style={styles.emailValue}>{username}</Text>
                        </>
                    )}
                </View>

                <Text style={styles.instructions}>
                    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è –ø–∞–ø–∫—É "–°–ø–∞–º")
                    {'\n'}2. –ù–∞–π–¥–∏—Ç–µ –ø–∏—Å—å–º–æ –æ—Ç AsuLinkApp
                    {'\n'}3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ø–∏—Å—å–º–µ
                    {'\n'}4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞
                </Text>

                {emailStatus && (
                    <View style={styles.statusContainer}>
                        <Text style={styles.statusTitle}>–°—Ç–∞—Ç—É—Å:</Text>
                        <Text style={[
                            styles.statusText,
                            emailStatus.email_confirmed ? styles.statusConfirmed : styles.statusPending
                        ]}>
                            {emailStatus.email_confirmed ? '‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}
                        </Text>
                    </View>
                )}

                <View style={styles.buttonContainer}>
                    <TouchableOpacity
                        style={[styles.button, styles.resendButton]}
                        onPress={handleResendEmail}
                        disabled={isLoading}
                    >
                        {isLoading ? (
                            <ActivityIndicator color="#fff" />
                        ) : (
                            <Text style={styles.buttonText}>üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.checkButton]}
                        onPress={checkStatus}
                        disabled={isChecking}
                    >
                        {isChecking ? (
                            <ActivityIndicator color="#fff" />
                        ) : (
                            <Text style={styles.buttonText}>üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.backButton]}
                        onPress={handleBackToLogin}
                    >
                        <Text style={styles.buttonText}>‚Üê –ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É</Text>
                    </TouchableOpacity>
                </View>
            </View>

            <View style={styles.bottomContainer}>
                <Text style={styles.hintText}>
                    –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" 
                    –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ".
                </Text>
            </View>
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    scrollContent: {
        flexGrow: 1,
    },
    topContainer: {
        minHeight: 200,
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingTop: 50,
        paddingBottom: 20,
    },
    middleContainer: {
        flex: 1,
        justifyContent: 'center',
        paddingHorizontal: 20,
        paddingVertical: 20,
    },
    bottomContainer: {
        minHeight: 80,
        justifyContent: 'flex-end',
        paddingHorizontal: 20,
        paddingBottom: 30,
    },
    logo: {
        width: 100,
        height: 100,
        resizeMode: 'contain',
        marginBottom: 10,
    },
    title1: {
        fontSize: 12,
        marginBottom: 8,
        textAlign: 'center',
        color: '#497fb8',
    },
    title2: {
        fontSize: 20,
        marginBottom: 8,
        textAlign: 'center',
        color: '#0c54a0',
        fontWeight: 'bold',
    },
    emailIcon: {
        width: 80,
        height: 80,
        borderRadius: 40,
        backgroundColor: '#e3f2fd',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        marginBottom: 20,
    },
    emailIconText: {
        fontSize: 40,
    },
    mainMessage: {
        fontSize: 24,
        fontWeight: 'bold',
        textAlign: 'center',
        color: '#333',
        marginBottom: 20,
    },
    emailInfo: {
        backgroundColor: '#f8f9fa',
        padding: 15,
        borderRadius: 8,
        marginBottom: 20,
        borderLeftWidth: 4,
        borderLeftColor: '#2465a9',
    },
    emailLabel: {
        fontSize: 14,
        color: '#666',
        marginBottom: 5,
    },
    emailValue: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#333',
        marginBottom: 10,
    },
    instructions: {
        fontSize: 16,
        lineHeight: 24,
        color: '#666',
        textAlign: 'left',
        marginBottom: 20,
    },
    statusContainer: {
        backgroundColor: '#e8f5e8',
        padding: 15,
        borderRadius: 8,
        marginBottom: 20,
        borderLeftWidth: 4,
        borderLeftColor: '#4CAF50',
    },
    statusTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#333',
        marginBottom: 5,
    },
    statusText: {
        fontSize: 16,
    },
    statusConfirmed: {
        color: '#2e7d32',
    },
    statusPending: {
        color: '#f57c00',
    },
    buttonContainer: {
        gap: 15,
    },
    button: {
        paddingVertical: 15,
        paddingHorizontal: 20,
        borderRadius: 8,
        alignItems: 'center',
    },
    resendButton: {
        backgroundColor: '#FF9800',
    },
    checkButton: {
        backgroundColor: '#2196F3',
    },
    backButton: {
        backgroundColor: '#757575',
    },
    buttonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: 'bold',
    },
    hintText: {
        fontSize: 12,
        color: 'gray',
        textAlign: 'center',
        lineHeight: 16,
    },
});

export default EmailConfirmationScreen;
