import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    ActivityIndicator,
    Alert,
    Image,
    ScrollView,
    TextInput,
} from 'react-native';
import { saveData, KEYS } from '../utils/storage';
import { checkUserRole } from '../services/api';

interface ProfileSetupScreenProps {
    navigation: any;
    route: any;
}

const ProfileSetupScreen: React.FC<ProfileSetupScreenProps> = ({ navigation, route }) => {
    // –û–±—â–∏–µ –ø–æ–ª—è
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [middleName, setMiddleName] = useState('');

    // –ü–æ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const [faculty, setFaculty] = useState('');
    const [group, setGroup] = useState('');

    // –ü–æ–ª—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    const [department, setDepartment] = useState('');
    const [position, setPosition] = useState('');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    const [userRole, setUserRole] = useState<'student' | 'professor' | 'admin' | null>(null);
    const [roleDisplay, setRoleDisplay] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingUserData, setIsLoadingUserData] = useState(true);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const email = route.params?.email || '';
    const username = route.params?.username || '';
    const token = route.params?.token || '';

    // Validation state
    const [errors, setErrors] = useState<{[key: string]: string}>({});
    const [isButtonActive, setIsButtonActive] = useState(false);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const loadUserRole = async () => {
            setIsLoadingUserData(true);

            try {
                const roleData = await checkUserRole(email);

                setUserRole(roleData.role);
                setRoleDisplay(roleData.role_display);

                console.log(`üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –¥–ª—è ${email}: ${roleData.role_display}`);
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error.message);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                setUserRole('student');
                setRoleDisplay('–°—Ç—É–¥–µ–Ω—Ç');
                Alert.alert('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª—å. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å "–°—Ç—É–¥–µ–Ω—Ç".');
            } finally {
                setIsLoadingUserData(false);
            }
        };

        if (email) {
            loadUserRole();
        } else {
            setIsLoadingUserData(false);
        }
    }, [email]);

    // Validation effect
    useEffect(() => {
        let isValid = firstName.trim().length > 0 &&
                     lastName.trim().length > 0 &&
                     middleName.trim().length > 0;

        if (userRole === 'student') {
            isValid = isValid && faculty.trim().length > 0 && group.trim().length > 0;
        } else if (userRole === 'professor') {
            isValid = isValid && department.trim().length > 0 && position.trim().length > 0;
        }

        setIsButtonActive(isValid);
    }, [firstName, lastName, middleName, faculty, group, department, position, userRole]);

    // Form validation
    const validateForm = () => {
        const newErrors: {[key: string]: string} = {};

        // –û–±—â–∏–µ –ø–æ–ª—è
        if (!firstName.trim()) {
            newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        } else if (firstName.trim().length < 2) {
            newErrors.firstName = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        }

        if (!lastName.trim()) {
            newErrors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
        } else if (lastName.trim().length < 2) {
            newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        }

        if (!middleName.trim()) {
            newErrors.middleName = '–û—Ç—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        } else if (middleName.trim().length < 2) {
            newErrors.middleName = '–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        if (userRole === 'student') {
            if (!faculty.trim()) {
                newErrors.faculty = '–§–∞–∫—É–ª—å—Ç–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
            } else if (faculty.trim().length < 2) {
                newErrors.faculty = '–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }

            if (!group.trim()) {
                newErrors.group = '–ì—Ä—É–ø–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
            } else if (group.trim().length < 2) {
                newErrors.group = '–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if (userRole === 'professor') {
            if (!department.trim()) {
                newErrors.department = '–ö–∞—Ñ–µ–¥—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
            } else if (department.trim().length < 2) {
                newErrors.department = '–ö–∞—Ñ–µ–¥—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }

            if (!position.trim()) {
                newErrors.position = '–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
            } else if (position.trim().length < 2) {
                newErrors.position = '–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSaveProfile = async () => {
        if (!validateForm()) {
            return;
        }

        setIsLoading(true);
        setErrors({});

        try {
            const profileData: any = {
                id: '1',
                name: `${lastName.trim()} ${firstName.trim()} ${middleName.trim()}`,
                avatar: require('../../assets/Avatar.jpg'),
                email: email,
                role: userRole || 'student',
                username: username,
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if (userRole === 'student') {
                profileData.faculty = faculty.trim();
                profileData.group = group.trim();
            } else if (userRole === 'professor') {
                profileData.department = department.trim();
                profileData.position = position.trim();
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
            console.log('üíæ Saving profile data...');
            console.log(`üë§ –†–æ–ª—å: ${userRole} (${roleDisplay})`);
            const profileSaved = await saveData(KEYS.USER_PROFILE, profileData);
            if (!profileSaved) {
                console.warn('‚ö†Ô∏è Failed to save profile to storage');
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            navigation.reset({
                index: 0,
                routes: [{ name: 'Main' }],
            });

        } catch (error: any) {
            Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
        } finally {
            setIsLoading(false);
        }
    };

    const handleSkip = () => {
        Alert.alert(
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ?',
            '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
            [
                { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                {
                    text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                    onPress: () => {
                        navigation.reset({
                            index: 0,
                            routes: [{ name: 'Main' }],
                        });
                    }
                }
            ]
        );
    };

    if (isLoadingUserData) {
        return (
            <View style={[styles.container, styles.loadingContainer]}>
                <ActivityIndicator size="large" color="#0c54a0" />
                <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</Text>
            </View>
        );
    }

    return (
        <ScrollView style={styles.container} contentContainerStyle={styles.scrollContent}>
            <View style={styles.topContainer}>
                <Image
                    source={require('../../assets/logo.png')}
                    style={styles.logo}
                />
                <Text style={styles.title1}>–ê–õ–¢–ê–ô–°–ö–ò–ô –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢</Text>
                <Text style={styles.title2}>–ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø</Text>
                <Text style={styles.title3}>–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø –ò –°–¢–£–î–ï–ù–¢–ê</Text>
            </View>

            <View style={styles.middleContainer}>
                <Text style={styles.welcomeMessage}>
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AsuLinkApp!
                </Text>

                {roleDisplay && (
                    <Text style={styles.roleInfo}>
                        –í–∞—à–∞ —Ä–æ–ª—å: {roleDisplay}
                    </Text>
                )}

                <Text style={styles.instructions}>
                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                </Text>

                {/* –û–±—â–∏–µ –ø–æ–ª—è */}
                <TextInput
                    placeholder="–§–∞–º–∏–ª–∏—è"
                    value={lastName}
                    onChangeText={setLastName}
                    style={[styles.input, errors.lastName && styles.inputError]}
                    editable={!isLoading}
                />
                {errors.lastName && <Text style={styles.errorText}>{errors.lastName}</Text>}

                <TextInput
                    placeholder="–ò–º—è"
                    value={firstName}
                    onChangeText={setFirstName}
                    style={[styles.input, errors.firstName && styles.inputError]}
                    editable={!isLoading}
                />
                {errors.firstName && <Text style={styles.errorText}>{errors.firstName}</Text>}

                <TextInput
                    placeholder="–û—Ç—á–µ—Å—Ç–≤–æ"
                    value={middleName}
                    onChangeText={setMiddleName}
                    style={[styles.input, errors.middleName && styles.inputError]}
                    editable={!isLoading}
                />
                {errors.middleName && <Text style={styles.errorText}>{errors.middleName}</Text>}

                {/* –ü–æ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
                {userRole === 'student' && (
                    <>
                        <TextInput
                            placeholder="–§–∞–∫—É–ª—å—Ç–µ—Ç"
                            value={faculty}
                            onChangeText={setFaculty}
                            style={[styles.input, errors.faculty && styles.inputError]}
                            editable={!isLoading}
                        />
                        {errors.faculty && <Text style={styles.errorText}>{errors.faculty}</Text>}

                        <TextInput
                            placeholder="–ì—Ä—É–ø–ø–∞"
                            value={group}
                            onChangeText={setGroup}
                            style={[styles.input, errors.group && styles.inputError]}
                            editable={!isLoading}
                        />
                        {errors.group && <Text style={styles.errorText}>{errors.group}</Text>}
                    </>
                )}

                {/* –ü–æ–ª—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π */}
                {userRole === 'professor' && (
                    <>
                        <TextInput
                            placeholder="–ö–∞—Ñ–µ–¥—Ä–∞"
                            value={department}
                            onChangeText={setDepartment}
                            style={[styles.input, errors.department && styles.inputError]}
                            editable={!isLoading}
                        />
                        {errors.department && <Text style={styles.errorText}>{errors.department}</Text>}

                        <TextInput
                            placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                            value={position}
                            onChangeText={setPosition}
                            style={[styles.input, errors.position && styles.inputError]}
                            editable={!isLoading}
                        />
                        {errors.position && <Text style={styles.errorText}>{errors.position}</Text>}
                    </>
                )}

                <View style={styles.buttonContainer}>
                    <TouchableOpacity
                        style={[
                            styles.button,
                            styles.saveButton,
                            { backgroundColor: isButtonActive && !isLoading ? '#28a745' : '#BBBBBB' }
                        ]}
                        onPress={handleSaveProfile}
                        disabled={!isButtonActive || isLoading}
                    >
                        {isLoading ? (
                            <ActivityIndicator color="#fff" />
                        ) : (
                            <Text style={styles.buttonText}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.skipButton]}
                        onPress={handleSkip}
                        disabled={isLoading}
                    >
                        <Text style={styles.buttonText}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    scrollContent: {
        flexGrow: 1,
        justifyContent: 'space-between',
    },
    topContainer: {
        flex: 0.3,
        justifyContent: 'center',
        alignItems: 'center',
        paddingTop: 20,
        paddingBottom: 10,
    },
    middleContainer: {
        flex: 0.7,
        justifyContent: 'center',
        paddingHorizontal: 20,
        paddingVertical: 10,
    },
    logo: {
        width: 110,
        height: 110,
        resizeMode: 'contain',
        marginBottom: 12,
        alignSelf: 'center',
    },
    title1: {
        fontSize: 12,
        marginBottom: 8,
        textAlign: 'center',
        color: '#497fb8',
    },
    title2: {
        fontSize: 20,
        marginBottom: 8,
        textAlign: 'center',
        color: '#0c54a0',
        fontWeight: 'bold',
    },
    title3: {
        fontSize: 15,
        marginBottom: 0,
        textAlign: 'center',
        color: '#0c54a0',
    },
    welcomeMessage: {
        fontSize: 22,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 15,
        color: '#333',
    },
    roleInfo: {
        fontSize: 16,
        fontWeight: '600',
        textAlign: 'center',
        marginBottom: 10,
        color: '#0c54a0',
        backgroundColor: '#e6f2ff',
        paddingVertical: 8,
        paddingHorizontal: 15,
        borderRadius: 8,
    },
    instructions: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 30,
        color: '#666',
        lineHeight: 22,
    },
    loadingContainer: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    loadingText: {
        marginTop: 15,
        fontSize: 16,
        color: '#666',
    },
    input: {
        height: 50,
        borderColor: '#ccc',
        borderWidth: 1,
        borderRadius: 8,
        paddingHorizontal: 15,
        marginVertical: 8,
        fontSize: 16,
    },
    inputError: {
        borderColor: '#ff4444',
        borderWidth: 2,
    },
    errorText: {
        color: '#ff4444',
        fontSize: 14,
        marginTop: -5,
        marginBottom: 10,
        marginLeft: 5,
    },
    buttonContainer: {
        marginTop: 20,
        gap: 15,
    },
    button: {
        paddingVertical: 15,
        borderRadius: 8,
        alignItems: 'center',
        minHeight: 50,
        justifyContent: 'center',
    },
    saveButton: {
        backgroundColor: '#28a745',
    },
    skipButton: {
        backgroundColor: '#6c757d',
    },
    buttonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: 'bold',
    },
});

export default ProfileSetupScreen;
