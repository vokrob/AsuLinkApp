import React, { useState, useEffect, useRef } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    ActivityIndicator,
    Alert,
    Image,
    ScrollView,
    TextInput,
} from 'react-native';
import { verifyEmailCode, resendConfirmation, setAuthToken } from '../services/api';
import { saveData, KEYS } from '../utils/storage';

interface CodeVerificationScreenProps {
    navigation: any;
    route: any;
}

const CodeVerificationScreen: React.FC<CodeVerificationScreenProps> = ({ navigation, route }) => {
    const [code, setCode] = useState(['', '', '', '', '', '']);
    const [isLoading, setIsLoading] = useState(false);
    const [isResending, setIsResending] = useState(false);
    const [timeLeft, setTimeLeft] = useState(15 * 60); // 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const email = route.params?.email || '';
    const username = route.params?.username || '';
    const nextStep = route.params?.next_step || 'enter_code';
    
    // Refs –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const inputRefs = useRef<(TextInput | null)[]>([]);

    useEffect(() => {
        // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        const timer = setInterval(() => {
            setTimeLeft((prev) => {
                if (prev <= 1) {
                    clearInterval(timer);
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);

        return () => clearInterval(timer);
    }, []);

    const formatTime = (seconds: number) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    const handleCodeChange = (value: string, index: number) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if (!/^\d*$/.test(value)) return;

        const newCode = [...code];
        newCode[index] = value;
        setCode(newCode);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
        if (value && index < 5) {
            inputRefs.current[index + 1]?.focus();
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        if (newCode.every(digit => digit !== '') && newCode.join('').length === 6) {
            handleVerifyCode(newCode.join(''));
        }
    };

    const handleKeyPress = (key: string, index: number) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Backspace
        if (key === 'Backspace' && !code[index] && index > 0) {
            inputRefs.current[index - 1]?.focus();
        }
    };

    const handleVerifyCode = async (codeToVerify?: string) => {
        const verificationCode = codeToVerify || code.join('');
        
        if (verificationCode.length !== 6) {
            Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥');
            return;
        }

        setIsLoading(true);
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:', verificationCode);
            const response = await verifyEmailCode(email, verificationCode);
            
            console.log('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', response);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (response.token) {
                setAuthToken(response.token);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                console.log('üíæ Saving auth token...');
                const tokenSaved = await saveData(KEYS.AUTH_TOKEN, response.token);
                if (!tokenSaved) {
                    console.warn('‚ö†Ô∏è Failed to save token to storage');
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (response.user) {
                    console.log('üíæ Saving user profile...');
                    const profileSaved = await saveData(KEYS.USER_PROFILE, response.user);
                    if (!profileSaved) {
                        console.warn('‚ö†Ô∏è Failed to save user profile to storage');
                    }
                }
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if (response.token) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                navigation.reset({
                    index: 0,
                    routes: [{
                        name: 'ProfileSetup',
                        params: {
                            email: email,
                            username: username,
                            token: response.token
                        }
                    }],
                });
            } else {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
                navigation.reset({
                    index: 0,
                    routes: [{ name: 'Login' }],
                });
            }

        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞';
            if (error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')) {
                errorMessage = error.message;
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ
                setCode(['', '', '', '', '', '']);
                inputRefs.current[0]?.focus();
            } else if (error.message.includes('–ø—Ä–µ–≤—ã—à–µ–Ω–æ')) {
                errorMessage = error.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            Alert.alert('–û—à–∏–±–∫–∞', errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    const handleResendCode = async () => {
        setIsResending(true);
        try {
            await resendConfirmation(email);
            setTimeLeft(15 * 60); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            setCode(['', '', '', '', '', '']); // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            inputRefs.current[0]?.focus();
            
            Alert.alert(
                '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                '–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.'
            );
        } catch (error: any) {
            Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
        } finally {
            setIsResending(false);
        }
    };

    const handleBackToLogin = () => {
        navigation.reset({
            index: 0,
            routes: [{ name: 'Login' }],
        });
    };

    return (
        <ScrollView style={styles.container} contentContainerStyle={styles.scrollContent}>
            <View style={styles.topContainer}>
                <Image
                    source={require('../../assets/logo.png')}
                    style={styles.logo}
                />
                <Text style={styles.title1}>–ê–õ–¢–ê–ô–°–ö–ò–ô –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢</Text>
                <Text style={styles.title2}>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ö–û–î–ê</Text>
            </View>

            <View style={styles.middleContainer}>
                <Text style={styles.mainMessage}>
                    –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                </Text>

                <Text style={styles.instructions}>
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                </Text>

                {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ */}
                <View style={styles.codeInputContainer}>
                    {code.map((digit, index) => (
                        <TextInput
                            key={index}
                            ref={(ref) => (inputRefs.current[index] = ref)}
                            style={[
                                styles.codeInput,
                                digit ? styles.codeInputFilled : null
                            ]}
                            value={digit}
                            onChangeText={(value) => handleCodeChange(value, index)}
                            onKeyPress={({ nativeEvent }) => handleKeyPress(nativeEvent.key, index)}
                            keyboardType="numeric"
                            maxLength={1}
                            textAlign="center"
                            editable={!isLoading}
                            autoFocus={index === 0}
                        />
                    ))}
                </View>

                {/* –¢–∞–π–º–µ—Ä */}
                <View style={styles.timerContainer}>
                    <Text style={styles.timerText}>
                        {timeLeft > 0 
                            ? `–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${formatTime(timeLeft)}`
                            : '–ö–æ–¥ –∏—Å—Ç–µ–∫'
                        }
                    </Text>
                </View>

                {/* –ö–Ω–æ–ø–∫–∏ */}
                <View style={styles.buttonContainer}>
                    <TouchableOpacity
                        style={[styles.button, styles.verifyButton]}
                        onPress={() => handleVerifyCode()}
                        disabled={isLoading || code.join('').length !== 6}
                    >
                        {isLoading ? (
                            <ActivityIndicator color="#fff" />
                        ) : (
                            <Text style={styles.buttonText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.resendButton]}
                        onPress={handleResendCode}
                        disabled={isResending || timeLeft > 14 * 60} // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
                    >
                        {isResending ? (
                            <ActivityIndicator color="#fff" />
                        ) : (
                            <Text style={styles.buttonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.backButton]}
                        onPress={handleBackToLogin}
                    >
                        <Text style={styles.buttonText}>–ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    scrollContent: {
        flexGrow: 1,
    },
    topContainer: {
        minHeight: 250,
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingTop: 50,
        paddingBottom: 20,
    },
    middleContainer: {
        flex: 1,
        justifyContent: 'center',
        paddingHorizontal: 20,
        paddingVertical: 20,
    },
    logo: {
        width: 120,
        height: 120,
        resizeMode: 'contain',
        marginBottom: 10,
        alignSelf: 'center',
    },
    title1: {
        fontSize: 12,
        marginBottom: 8,
        textAlign: 'center',
        color: '#497fb8',
    },
    title2: {
        fontSize: 22,
        marginBottom: 8,
        textAlign: 'center',
        color: '#0c54a0',
        fontWeight: 'bold',
    },

    mainMessage: {
        fontSize: 20,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 20,
        color: '#333',
    },

    instructions: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 30,
        color: '#666',
        lineHeight: 22,
    },
    codeInputContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: 20,
        paddingHorizontal: 10,
    },
    codeInput: {
        width: 45,
        height: 55,
        borderWidth: 2,
        borderColor: '#ddd',
        borderRadius: 8,
        fontSize: 24,
        fontWeight: 'bold',
        color: '#333',
        backgroundColor: '#fff',
    },
    codeInputFilled: {
        borderColor: '#0c54a0',
        backgroundColor: '#f0f8ff',
    },
    timerContainer: {
        alignItems: 'center',
        marginBottom: 30,
    },
    timerText: {
        fontSize: 16,
        color: '#666',
        fontWeight: '500',
    },
    buttonContainer: {
        gap: 15,
    },
    button: {
        paddingVertical: 15,
        borderRadius: 8,
        alignItems: 'center',
        minHeight: 50,
        justifyContent: 'center',
    },
    verifyButton: {
        backgroundColor: '#28a745',
    },
    resendButton: {
        backgroundColor: '#007bff',
    },
    backButton: {
        backgroundColor: '#6c757d',
    },
    buttonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: 'bold',
    },
});

export default CodeVerificationScreen;
