// Network utilities for IP address detection and server connection
import { Platform } from 'react-native';

/**
 * Gets list of possible IP addresses for development server connection
 */
export const getPossibleServerIPs = (): string[] => {
    const ips: string[] = [];

    if (Platform.OS === 'web') {
        // Expo Web in browser - localhost only
        ips.push('127.0.0.1');
        ips.push('localhost');
    } else if (Platform.OS === 'android') {
        // For Android Expo emulator: localhost first, then standard emulator
        ips.push('127.0.0.1');  // Expo emulator often works with localhost
        ips.push('localhost');
        ips.push('10.0.2.2');   // Standard Android emulator

        // Common IP addresses in local networks for physical devices
        ips.push('192.168.1.100');
        ips.push('192.168.0.100');
        ips.push('192.168.155.1');
        ips.push('10.0.0.100');
        ips.push('172.16.0.100');
    } else if (Platform.OS === 'ios') {
        // For iOS simulator
        ips.push('127.0.0.1');
        ips.push('localhost');

        // For physical iOS devices
        ips.push('192.168.1.100');
        ips.push('192.168.0.100');
        ips.push('10.0.0.100');
    } else {
        // For other platforms
        ips.push('127.0.0.1');
        ips.push('localhost');
    }

    return ips;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
 */
export const getApiTestUrls = (port: number = 8000, apiPath: string = '/api'): string[] => {
    const urls: string[] = [];

    // –î–ª—è Expo —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç localhost
    if (Platform.OS === 'web' || Platform.OS === 'android') {
        urls.push(`http://127.0.0.1:${port}${apiPath}`);
        urls.push(`http://localhost:${port}${apiPath}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    urls.push('http://192.168.1.73:8000/api');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    const ips = getPossibleServerIPs();
    urls.push(...ips.map(ip => `http://${ip}:${port}${apiPath}`));

    // ngrok —Ç–æ–ª—å–∫–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
    // urls.push('https://your-ngrok-url.ngrok-free.app/api');

    return [...new Set(urls)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL
 */
export const testUrlConnection = async (url: string, timeout: number = 5000): Promise<{
    success: boolean;
    status?: number;
    data?: any;
    error?: string;
}> => {
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (response.ok) {
            const data = await response.json();
            return {
                success: true,
                status: response.status,
                data
            };
        } else {
            return {
                success: false,
                status: response.status,
                error: `HTTP ${response.status}`
            };
        }
    } catch (error: any) {
        const errorType = error.name === 'AbortError' ? 'Timeout' : (error.name || 'NetworkError');
        return {
            success: false,
            error: errorType
        };
    }
};

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π URL –∏–∑ —Å–ø–∏—Å–∫–∞
 */
export const findWorkingApiUrl = async (
    urls: string[], 
    timeout: number = 5000
): Promise<{
    success: boolean;
    workingUrl?: string;
    testedUrls: Array<{ url: string; result: any }>;
}> => {
    const testedUrls: Array<{ url: string; result: any }> = [];
    
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${urls.length} URL...`);

    for (const url of urls) {
        console.log(`   –ü—Ä–æ–≤–µ—Ä—è—é: ${url}`);
        const result = await testUrlConnection(url, timeout);
        testedUrls.push({ url, result });

        if (result.success) {
            console.log(`   –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π URL: ${url}`);
            return {
                success: true,
                workingUrl: url,
                testedUrls
            };
        } else {
            console.log(`   ${url}: ${result.error}`);
        }
    }

    console.log('–ù–∏ –æ–¥–∏–Ω URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    return {
        success: false,
        testedUrls
    };
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ç–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
export const getNetworkSetupInstructions = (): string[] => {
    return [
        'üîß –ù–ê–°–¢–†–û–ô–ö–ê –î–õ–Ø –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –£–°–¢–†–û–ô–°–¢–í–ê:',
        '',
        'üåê –í–ê–†–ò–ê–ù–¢ 1: ngrok (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):',
        '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Django: python manage.py runserver 0.0.0.0:8000',
        '2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ngrok: ngrok http 8000',
        '3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok URL –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        '',
        'üè† –í–ê–†–ò–ê–ù–¢ 2: –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:',
        '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Django —Å–µ—Ä–≤–µ—Ä:',
        '   python manage.py runserver 0.0.0.0:8000',
        '',
        '2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ–¥–Ω–æ–π Wi-Fi —Å–µ—Ç–∏',
        '',
        '3. –£–∑–Ω–∞–π—Ç–µ IP –∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:',
        '   Windows: ipconfig',
        '   Mac/Linux: ifconfig',
        '',
        '4. –û—Ç–∫–ª—é—á–∏—Ç–µ Windows Firewall –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä—Ç–∞ 8000',
        '',
        '5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
        '   http://[IP-–∞–¥—Ä–µ—Å]:8000/api/',
        '',
        '6. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:',
        '   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Wi-Fi –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ',
        '   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞',
        '   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞',
    ];
};
