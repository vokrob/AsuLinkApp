// API service for AsuLinkApp - Works on physical devices and emulators
import { Platform } from 'react-native';

// Simplified API URL configuration - single working address
const API_URL = 'http://192.168.1.73:8000/api';
export const API_BASE_URL = API_URL;

console.log(`üîó API URL for ${Platform.OS}: ${API_URL}`);

// Token storage
let authToken: string | null = null;

// Request headers
const getHeaders = (includeAuth: boolean = true) => {
    const headers: Record<string, string> = {
        'Content-Type': 'application/json',
    };

    if (includeAuth && authToken) {
        headers['Authorization'] = `Token ${authToken}`;
    }

    return headers;
};

// Login function
export const login = async (username: string, password: string) => {
    try {
        console.log('üîó Login attempt for user:', username);

        const result = await makeApiRequest('/auth/login/', {
            method: 'POST',
            body: { username, password }
        });

        if (result.success) {
            authToken = result.data.token;
            console.log('‚úÖ Login successful');
            return result.data;
        } else {
            const errorMessage = result.data?.error || 'Login error';
            console.error('‚ùå Login error:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå Critical login error:', error.message);
        throw new Error(error.message || 'Failed to login. Check credentials and connection.');
    }
};

// –ú–û–ë–ò–õ–¨–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–æ–¥–æ–º (3 —à–∞–≥–∞)
export const register = async (userData: {
    username: string;
    email: string;
    password: string;
    first_name?: string;
    last_name?: string;
}) => {
    try {
        console.log('üîó –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞');
        console.log('üìù Email:', userData.email);

        // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email
        const result = await makeApiRequest('/auth/register/', {
            method: 'POST',
            body: userData
        });

        if (result.success) {
            console.log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email');
            return {
                ...result.data,
                step: 'verify_code',
                userData: userData // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            };
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (error.message && error.message.includes('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')) {
            throw new Error('–í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à–µ–ª –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É - –µ—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—à–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.');
        }

        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ email
export const checkEmailStatus = async (email: string) => {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ email:', email);

        const result = await makeApiRequest(`/auth/check-email-status/?email=${encodeURIComponent(email)}`, {
            method: 'GET'
        });

        if (result.success) {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å email –ø–æ–ª—É—á–µ–Ω');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å email.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
export const resendConfirmation = async (email: string) => {
    try {
        console.log('üìß –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞:', email);

        const result = await makeApiRequest('/auth/resend-confirmation/', {
            method: 'POST',
            body: { email }
        });

        if (result.success) {
            console.log('‚úÖ –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.');
    }
};

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è 3-—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
const makeApiRequest = async (endpoint: string, options: any = {}) => {
    const { method = 'GET', body, headers = {} } = options;

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const defaultHeaders = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...headers
    };

    try {
        const url = `${API_URL}${endpoint}`;
        console.log(`üîó –ó–∞–ø—Ä–æ—Å: ${method} ${url}`);

        const controller = new AbortController();
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ email –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
        const timeoutDuration = endpoint.includes('/auth/register/') ? 30000 : 15000;
        const timeoutId = setTimeout(() => controller.abort(), timeoutDuration);

        const response = await fetch(url, {
            method,
            headers: defaultHeaders,
            body: body ? JSON.stringify(body) : undefined,
            signal: controller.signal,
        });

        clearTimeout(timeoutId);
        console.log(`üì° –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (response.ok) {
            const data = await response.json();
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
            return { success: true, data, status: response.status };
        } else {
            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
            console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ ${response.status}: ${JSON.stringify(errorData)}`);
            return { success: false, data: errorData, status: response.status };
        }
    } catch (error: any) {
        const errorType = error.name === 'AbortError' ? 'Timeout' : (error.message || error.name);
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${errorType}`);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (error.name === 'AbortError' && endpoint.includes('/auth/register/')) {
            throw new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—à–µ–ª –Ω–∞ –ø–æ—á—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ.');
        }

        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${errorType}`);
    }
};

// –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ email
export const sendEmailCode = async (email: string) => {
    try {
        console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email:', email);

        const result = await makeApiRequest('/auth/send-code/', {
            method: 'POST',
            body: { email }
        });

        if (result.success) {
            console.log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞';
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –¥–ª—è Django Allauth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const verifyEmailCode = async (email: string, code: string) => {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Django Allauth:', code);

        const result = await makeApiRequest('/auth/verify-code/', {
            method: 'POST',
            body: { email, code }
        });

        if (result.success) {
            console.log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏';
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export const getCurrentUser = async () => {
    try {
        console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');

        const result = await makeApiRequest('/auth/me/', {
            method: 'GET'
        });

        if (result.success) {
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
export const checkUserRole = async (email: string) => {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è email:', email);

        const result = await makeApiRequest('/auth/check-role/', {
            method: 'POST',
            body: { email }
        });

        if (result.success) {
            console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', result.data.role_display);
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏';
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
};

// –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const completeProfile = async (profileData: {
    email: string;
    username: string;
    password: string;
    first_name?: string;
    last_name?: string;
}) => {
    try {
        console.log('üë§ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', profileData.username);

        const result = await makeApiRequest('/auth/complete-profile/', {
            method: 'POST',
            body: profileData
        });

        if (result.success) {
            authToken = result.data.token;
            console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
            return result.data;
        } else {
            const errorMessage = result.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', errorMessage);
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
export const logout = async () => {
    try {
        if (authToken) {
            await fetch(`${API_URL}/auth/logout/`, {
                method: 'POST',
                headers: getHeaders(),
            });
        }
        authToken = null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        authToken = null;
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
export const fetchPosts = async () => {
    try {
        const response = await fetch(`${API_URL}/posts/`, {
            headers: getHeaders(false),
        });

        if (response.ok) {
            const data = await response.json();
            return data.results || data;
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
        throw error;
    }
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
export const setAuthToken = (token: string | null) => {
    authToken = token;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const getAuthToken = () => authToken;

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const testConnection = async () => {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
    console.log(`üîó URL: ${API_URL}`);

    try {
        const result = await makeApiRequest('/', { method: 'GET' });

        if (result.success) {
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
            return { success: true, url: API_URL };
        } else {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
            return { success: false, url: null };
        }
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        return { success: false, url: null };
    }
};