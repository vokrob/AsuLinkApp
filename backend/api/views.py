from rest_framework import generics, status, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
from allauth.account.models import EmailAddress
from posts.models import Post, Comment, Like
from accounts.models import UserProfile, EmailVerificationCode
from .serializers import (
    PostSerializer, PostCreateSerializer, CommentSerializer,
    CommentCreateSerializer, UserSerializer, UserProfileSerializer
)


def send_verification_code(email, user=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email —á–µ—Ä–µ–∑ Django email backend"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        verification_code = EmailVerificationCode.generate_code(email, user)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        user_name = None
        if user:
            user_name = user.get_full_name() or user.username
        else:
            user_name = email.split('@')[0]

        context = {
            'verification_code': verification_code.code,
            'user_name': user_name,
            'email': email
        }

        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω—ã
        subject = f"[AsuLinkApp] –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code.code}"
        text_content = render_to_string('account/email/email_confirmation_message.txt', context)
        html_content = render_to_string('account/email/email_confirmation_message.html', context)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Django
        send_mail(
            subject=subject,
            message=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email],
            html_message=html_content,
            fail_silently=False,
        )

        print(f"üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code.code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
        return verification_code

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
        raise e


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def login_view(request):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π username/email –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    username = request.data.get('username')
    password = request.data.get('password')

    if not username or not password:
        return Response({
            'success': False,
            'error': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
            'code': 'MISSING_CREDENTIALS'
        }, status=status.HTTP_400_BAD_REQUEST)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ username
    user = authenticate(username=username, password=password)

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ email
    if not user:
        try:
            user_by_email = User.objects.get(email=username)
            user = authenticate(username=user_by_email.username, password=password)
        except User.DoesNotExist:
            pass

    if not user:
        return Response({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            'code': 'INVALID_CREDENTIALS'
        }, status=status.HTTP_401_UNAUTHORIZED)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    try:
        email_address = EmailAddress.objects.get(user=user, primary=True)
        if not email_address.verified:
            return Response({
                'success': False,
                'error': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                'code': 'EMAIL_NOT_VERIFIED',
                'email_verification_required': True,
                'email': user.email,
                'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å'
            }, status=status.HTTP_403_FORBIDDEN)
    except EmailAddress.DoesNotExist:
        # –°–æ–∑–¥–∞–µ–º EmailAddress –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        EmailAddress.objects.create(
            user=user,
            email=user.email,
            primary=True,
            verified=False
        )
        return Response({
            'success': False,
            'error': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'code': 'EMAIL_NOT_VERIFIED',
            'email_verification_required': True,
            'email': user.email,
            'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –∞–¥—Ä–µ—Å'
        }, status=status.HTTP_403_FORBIDDEN)

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    if not user.is_active:
        user.is_active = True
        user.save()

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token, created = Token.objects.get_or_create(user=user)

    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")

    return Response({
        'success': True,
        'token': token.key,
        'user': UserSerializer(user).data,
        'message': 'Login successful'
    }, status=status.HTTP_200_OK)


@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def api_root(request):
    """Root API endpoint with information about available endpoints"""
    return Response({
        'message': 'AsuLinkApp API',
        'version': '1.0.0',
        'status': 'running',
        'endpoints': {
            'authentication': {
                'send_code': '/api/auth/send-code/',
                'verify_code': '/api/auth/verify-code/',
                'complete_profile': '/api/auth/complete-profile/',
                'login': '/api/auth/login/',
                'logout': '/api/auth/logout/',
                'current_user': '/api/auth/me/',
                'refresh_token': '/api/auth/refresh-token/',
                'resend_code': '/api/auth/resend-code/',
            },
            'posts': {
                'list_create': '/api/posts/',
                'detail': '/api/posts/{id}/',
                'like': '/api/posts/{id}/like/',
                'view': '/api/posts/{id}/view/',
                'comments': '/api/posts/{id}/comments/',
            },
            'user': {
                'profile': '/api/profile/',
                'detail': '/api/users/{id}/',
            },
            'test': '/api/test/',
        },
        'documentation': {
            'admin': '/admin/',
            'django_allauth': '/accounts/',
        }
    })


@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def test_api(request):
    """Test endpoint for API functionality check"""
    return Response({
        'status': 'API is working!',
        'message': 'Server is running and ready to work',
        'available_endpoints': [
            '/api/auth/send-code/ (POST)',
            '/api/auth/verify-code/ (POST)',
            '/api/auth/complete-profile/ (POST)',
            '/api/auth/login/ (POST)',
            '/api/test/ (GET)'
        ]
    })


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def send_email_code(request):
    """–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email"""
    try:
        email = request.data.get('email')

        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            validate_email(email)
        except ValidationError:
            return Response(
                {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email
        if User.objects.filter(email=email).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = send_verification_code(email)

        print(f"üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {email}")

        return Response({
            'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
            'email': email,
            'code_expires_in_minutes': 15
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def verify_email_code_step(request):
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        email = request.data.get('email')
        code = request.data.get('code')

        if not email or not code:
            return Response(
                {'error': 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = EmailVerificationCode.objects.filter(
            email=email,
            is_used=False
        ).order_by('-created_at').first()

        if not verification_code:
            return Response(
                {'error': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if verification_code.verify(code):
            print(f"‚úÖ Email {email} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

            return Response({
                'message': 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.',
                'email': email,
                'verified': True,
                'next_step': 'complete_profile'
            })
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
            attempts_left = 3 - verification_code.attempts
            if attempts_left <= 0:
                return Response(
                    {'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            else:
                return Response(
                    {
                        'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}',
                        'attempts_left': attempts_left
                    },
                    status=status.HTTP_400_BAD_REQUEST
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def complete_profile(request):
    """–®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        email = request.data.get('email')
        username = request.data.get('username')
        password = request.data.get('password')
        first_name = request.data.get('first_name', '')
        last_name = request.data.get('last_name', '')

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not username:
            return Response(
                {'error': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not password:
            return Response(
                {'error': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if len(password) < 6:
            return Response(
                {'error': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        verified_code = EmailVerificationCode.objects.filter(
            email=email,
            is_verified=True
        ).order_by('-created_at').first()

        if not verified_code:
            return Response(
                {'error': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email.'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if User.objects.filter(username=username).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if User.objects.filter(email=email).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name,
            is_active=True
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ EmailAddress –¥–ª—è Django Allauth
        email_address = EmailAddress.objects.create(
            user=user,
            email=email,
            primary=True,
            verified=True  # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        )

        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        verified_code.user = user
        verified_code.save()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
        token, created = Token.objects.get_or_create(user=user)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} ({email})")

        return Response({
            'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AsuLinkApp!',
            'token': token.key,
            'user': UserSerializer(user).data,
            'next_step': 'news_feed'
        }, status=status.HTTP_201_CREATED)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def resend_email_code(request):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞)"""
    try:
        email = request.data.get('email')

        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email
        if User.objects.filter(email=email).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = send_verification_code(email)

        print(f"üìß –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞: {email}")

        return Response({
            'message': '–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
            'email': email,
            'code_expires_in_minutes': 15
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def resend_verification_code(request):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    try:
        email = request.data.get('email')

        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ email
        try:
            email_address = EmailAddress.objects.get(user=user, email=email)
            if email_address.verified:
                return Response(
                    {'error': 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'},
                    status=status.HTTP_400_BAD_REQUEST
                )
        except EmailAddress.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º EmailAddress –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            email_address = EmailAddress.objects.create(
                user=user,
                email=email,
                primary=True,
                verified=False
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = send_verification_code(user, email)

        print(f"üìß –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞: {email}")

        return Response({
            'message': '–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
            'email': email,
            'code_expires_in_minutes': 15
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def verify_email_code(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email"""
    try:
        email = request.data.get('email')
        code = request.data.get('code')

        if not email or not code:
            return Response(
                {'error': 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        verification_code = EmailVerificationCode.objects.filter(
            user=user,
            email=email,
            is_used=False
        ).order_by('-created_at').first()

        if not verification_code:
            return Response(
                {'error': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if verification_code.verify(code):
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.is_active = True
            user.save()

            # –ü–æ–º–µ—á–∞–µ–º email –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            try:
                email_address = EmailAddress.objects.get(user=user, email=email)
                email_address.verified = True
                email_address.save()
            except EmailAddress.DoesNotExist:
                EmailAddress.objects.create(
                    user=user,
                    email=email,
                    primary=True,
                    verified=True
                )

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            token, created = Token.objects.get_or_create(user=user)

            print(f"‚úÖ Email {email} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

            return Response({
                'message': 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!',
                'verified': True,
                'token': token.key,
                'user': UserSerializer(user).data
            })
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
            attempts_left = 3 - verification_code.attempts
            if attempts_left <= 0:
                return Response(
                    {'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            else:
                return Response(
                    {
                        'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}',
                        'attempts_left': attempts_left
                    },
                    status=status.HTTP_400_BAD_REQUEST
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def check_email_verification(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    email = request.GET.get('email')

    if not email:
        return Response(
            {'error': 'Email –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
            status=status.HTTP_400_BAD_REQUEST
        )

    try:
        user = User.objects.get(email=email)
        email_address = EmailAddress.objects.get(user=user, email=email)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞
        active_code = EmailVerificationCode.objects.filter(
            user=user,
            email=email,
            is_used=False
        ).order_by('-created_at').first()

        return Response({
            'email': email,
            'verified': email_address.verified,
            'user_active': user.is_active,
            'can_login': email_address.verified and user.is_active,
            'has_pending_code': active_code is not None and active_code.is_valid()
        })

    except User.DoesNotExist:
        return Response(
            {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )
    except EmailAddress.DoesNotExist:
        return Response(
            {'error': 'Email –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def logout_view(request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞"""
    try:
        request.user.auth_token.delete()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        return Response({
            'success': True,
            'message': '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        })
    except Exception as e:
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
        }, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated])
def current_user(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user = request.user
        return Response({
            'success': True,
            'user': UserSerializer(user).data,
            'authenticated': True
        })
    except Exception as e:
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def refresh_token(request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
        request.user.auth_token.delete()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        token = Token.objects.create(user=request.user)

        print(f"‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username}")

        return Response({
            'success': True,
            'token': token.key,
            'message': '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        })
    except Exception as e:
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PostListCreateView(generics.ListCreateAPIView):
    queryset = Post.objects.all()
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_serializer_class(self):
        if self.request.method == 'POST':
            return PostCreateSerializer
        return PostSerializer

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)


class PostDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_permissions(self):
        if self.request.method in ['PUT', 'PATCH', 'DELETE']:
            return [permissions.IsAuthenticated()]
        return [permissions.IsAuthenticatedOrReadOnly()]

    def perform_update(self, serializer):
        if serializer.instance.author != self.request.user:
            raise permissions.PermissionDenied("You can only edit your own posts.")
        serializer.save()

    def perform_destroy(self, instance):
        if instance.author != self.request.user:
            raise permissions.PermissionDenied("You can only delete your own posts.")
        instance.delete()


class CommentListCreateView(generics.ListCreateAPIView):
    serializer_class = CommentSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        post_id = self.kwargs['post_id']
        return Comment.objects.filter(post_id=post_id)

    def get_serializer_class(self):
        if self.request.method == 'POST':
            return CommentCreateSerializer
        return CommentSerializer

    def perform_create(self, serializer):
        post_id = self.kwargs['post_id']
        post = get_object_or_404(Post, id=post_id)
        serializer.save(author=self.request.user, post=post)


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def toggle_like(request, post_id):
    post = get_object_or_404(Post, id=post_id)
    like, created = Like.objects.get_or_create(post=post, user=request.user)

    if not created:
        like.delete()
        post.likes = max(0, post.likes - 1)
        liked = False
    else:
        post.likes += 1
        liked = True

    post.save()

    return Response({
        'liked': liked,
        'likes_count': post.likes
    })


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def increment_views(request, post_id):
    post = get_object_or_404(Post, id=post_id)
    post.views += 1
    post.save()

    return Response({
        'views': post.views
    })


class UserProfileView(generics.RetrieveUpdateAPIView):
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        return self.request.user.profile


class UserDetailView(generics.RetrieveAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]


# ============================================================================
# –ù–û–í–´–ï VIEWS –î–õ–Ø –°–¢–ê–ù–î–ê–†–¢–ù–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò DJANGO ALLAUTH
# ============================================================================

@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def allauth_register(request):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Django Allauth —Å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    try:
        username = request.data.get('username')
        email = request.data.get('email')
        password = request.data.get('password')
        first_name = request.data.get('first_name', '')
        last_name = request.data.get('last_name', '')

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not username:
            return Response(
                {'error': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not password:
            return Response(
                {'error': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            validate_email(email)
        except ValidationError:
            return Response(
                {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if len(password) < 6:
            return Response(
                {'error': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if User.objects.filter(username=username).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if User.objects.filter(email=email).exists():
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email)
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name,
            is_active=False  # –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ EmailAddress –¥–ª—è Django Allauth
        email_address = EmailAddress.objects.create(
            user=user,
            email=email,
            primary=True,
            verified=False
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        verification_code = EmailVerificationCode.generate_code(email, user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º (–≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏)
        send_verification_code(email, user)

        print(f"üìß –ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º {verification_code.code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: {email}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {username} (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞)")

        return Response({
            'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.',
            'email': email,
            'username': username,
            'verification_code_sent': True,
            'requires_verification': True,
            'next_step': 'enter_code',
            'code_expires_in_minutes': 15
        }, status=status.HTTP_201_CREATED)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def check_email_status(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    email = request.GET.get('email')

    if not email:
        return Response(
            {'error': 'Email –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
            status=status.HTTP_400_BAD_REQUEST
        )

    try:
        user = User.objects.get(email=email)
        email_address = EmailAddress.objects.get(user=user, email=email)

        return Response({
            'email': email,
            'email_confirmed': email_address.verified,
            'user_active': user.is_active,
            'can_login': email_address.verified and user.is_active,
            'username': user.username
        })

    except User.DoesNotExist:
        return Response(
            {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )
    except EmailAddress.DoesNotExist:
        return Response(
            {'error': 'Email –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'},
            status=status.HTTP_404_NOT_FOUND
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def resend_confirmation(request):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email"""
    try:
        email = request.data.get('email')

        if not email:
            return Response(
                {'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ email
        try:
            email_address = EmailAddress.objects.get(user=user, email=email)
            if email_address.verified:
                return Response(
                    {'error': 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'},
                    status=status.HTTP_400_BAD_REQUEST
                )
        except EmailAddress.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º EmailAddress –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            EmailAddress.objects.create(
                user=user,
                email=email,
                primary=True,
                verified=False
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        send_email_confirmation(request, user, signup=False)

        print(f"üìß –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞: {email}")

        return Response({
            'message': '–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email',
            'email': email
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


@api_view(['POST'])
@permission_classes([permissions.AllowAny])
def verify_allauth_code(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è Django Allauth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        email = request.data.get('email')
        code = request.data.get('code')

        if not email or not code:
            return Response(
                {'error': 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response(
                {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'},
                status=status.HTTP_404_NOT_FOUND
            )

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = EmailVerificationCode.objects.filter(
            user=user,
            email=email,
            is_used=False
        ).order_by('-created_at').first()

        if not verification_code:
            return Response(
                {'error': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if verification_code.verify(code):
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email
            user.is_active = True
            user.save()

            # –ü–æ–º–µ—á–∞–µ–º email –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –≤ Django Allauth
            try:
                email_address = EmailAddress.objects.get(user=user, email=email)
                email_address.verified = True
                email_address.save()
            except EmailAddress.DoesNotExist:
                EmailAddress.objects.create(
                    user=user,
                    email=email,
                    primary=True,
                    verified=True
                )

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            token, created = Token.objects.get_or_create(user=user)

            print(f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è {email}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

            return Response({
                'message': 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AsuLinkApp!',
                'email': email,
                'username': user.username,
                'verified': True,
                'user_activated': True,
                'token': token.key,
                'user': UserSerializer(user).data
            })
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
            attempts_left = 3 - verification_code.attempts
            if attempts_left <= 0:
                return Response(
                    {'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            else:
                return Response(
                    {
                        'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}',
                        'attempts_left': attempts_left
                    },
                    status=status.HTTP_400_BAD_REQUEST
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {str(e)}")
        return Response(
            {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
