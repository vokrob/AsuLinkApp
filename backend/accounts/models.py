from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
import random
import string


class TeacherEmail(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    email = models.EmailField(unique=True, verbose_name="Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    department = models.CharField(max_length=200, blank=True, verbose_name="–ö–∞—Ñ–µ–¥—Ä–∞")
    position = models.CharField(max_length=100, blank=True, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å")
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    class Meta:
        verbose_name = "Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"
        ordering = ['email']

    def __str__(self):
        return f"{self.email} ({self.department or '–ö–∞—Ñ–µ–¥—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})"


class UserProfile(models.Model):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    ROLE_CHOICES = [
        ('student', '–°—Ç—É–¥–µ–Ω—Ç'),
        ('professor', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='student', verbose_name="–†–æ–ª—å")

    # –û–±—â–∏–µ –ø–æ–ª—è
    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True)
    bio = models.TextField(max_length=500, blank=True)
    birth_date = models.DateField(null=True, blank=True)

    # –ü–æ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    faculty = models.CharField(max_length=200, blank=True, verbose_name="–§–∞–∫—É–ª—å—Ç–µ—Ç/–ò–Ω—Å—Ç–∏—Ç—É—Ç")
    group = models.CharField(max_length=50, blank=True, verbose_name="–ì—Ä—É–ø–ø–∞")
    course = models.IntegerField(null=True, blank=True, verbose_name="–ö—É—Ä—Å")

    # –ü–æ–ª—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    department = models.CharField(max_length=200, blank=True, verbose_name="–ö–∞—Ñ–µ–¥—Ä–∞")
    position = models.CharField(max_length=100, blank=True, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å")

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    def __str__(self):
        role_display = dict(self.ROLE_CHOICES).get(self.role, self.role)
        return f"{self.user.get_full_name() or self.user.username} ({role_display})"

    @property
    def avatar_url(self):
        if self.avatar:
            return self.avatar.url
        return None

    @property
    def full_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user.get_full_name() or self.user.username

    @classmethod
    def determine_role_by_email(cls, email):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∞–¥—Ä–µ—Å—É"""
        if TeacherEmail.objects.filter(email=email, is_active=True).exists():
            return 'professor'
        return 'student'


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ–ª–∏"""
    if created:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ email
        role = UserProfile.determine_role_by_email(instance.email)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
        UserProfile.objects.create(user=instance, role=role)

        print(f"üë§ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {instance.username} ({instance.email}) —Å —Ä–æ–ª—å—é: {role}")


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if hasattr(instance, 'profile'):
        instance.profile.save()
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ email
        role = UserProfile.determine_role_by_email(instance.email)
        UserProfile.objects.create(user=instance, role=role)


class EmailVerificationCode(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='verification_codes', null=True, blank=True)
    email = models.EmailField()
    code = models.CharField(max_length=6)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()
    is_used = models.BooleanField(default=False)
    attempts = models.IntegerField(default=0)
    is_verified = models.BooleanField(default=False)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –∫–æ–¥

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"–ö–æ–¥ {self.code} –¥–ª—è {self.email}"

    @classmethod
    def generate_code(cls, email, user=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è email (—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –±–µ–∑)"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ email
        cls.objects.filter(email=email, is_used=False).delete()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        code = ''.join(random.choices(string.digits, k=6))

        # –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç
        expires_at = timezone.now() + timezone.timedelta(minutes=15)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        verification_code = cls.objects.create(
            user=user,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            email=email,
            code=code,
            expires_at=expires_at
        )

        return verification_code

    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –∫–æ–¥"""
        return (
            not self.is_used and
            timezone.now() < self.expires_at and
            self.attempts < 3
        )

    def verify(self, input_code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥"""
        self.attempts += 1
        self.save()

        if not self.is_valid():
            return False

        if self.code == input_code:
            self.is_used = True
            self.is_verified = True
            self.save()
            return True

        return False
