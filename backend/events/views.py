from rest_framework import generics, status, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.db import models
from .models import Event, EventParticipant, EventReview
from .serializers import (
    EventListSerializer, EventDetailSerializer, EventReviewSerializer,
    EventCreateFromPostSerializer, EventParticipantSerializer
)


class EventListCreateView(generics.ListCreateAPIView):
    """–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    permission_classes = [permissions.IsAuthenticated]

    def get_serializer_class(self):
        if self.request.method == 'POST':
            return EventDetailSerializer
        return EventListSerializer

    def get_queryset(self):
        queryset = Event.objects.filter(is_public=True)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = self.request.query_params.get('category')
        if category:
            queryset = queryset.filter(category=category)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
        date_filter = self.request.query_params.get('date')
        if date_filter == 'today':
            today = timezone.now().date()
            queryset = queryset.filter(start_datetime__date=today)
        elif date_filter == 'upcoming':
            queryset = queryset.filter(start_datetime__gte=timezone.now())
        elif date_filter == 'past':
            queryset = queryset.filter(start_datetime__lt=timezone.now())

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        year = self.request.query_params.get('year')
        month = self.request.query_params.get('month')
        if year and month:
            queryset = queryset.filter(
                start_datetime__year=int(year),
                start_datetime__month=int(month)
            )

        # –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
        my_events = self.request.query_params.get('my_events')
        if my_events == 'true':
            user = self.request.user
            queryset = queryset.filter(
                models.Q(organizer=user) | models.Q(participants=user)
            ).distinct()

        return queryset.order_by('start_datetime')


class EventDetailView(generics.RetrieveUpdateDestroyAPIView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"""
    queryset = Event.objects.all()
    serializer_class = EventDetailSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_permissions(self):
        """–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å/—É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        if self.request.method in ['PUT', 'PATCH', 'DELETE']:
            return [permissions.IsAuthenticated(), IsEventOrganizerOrReadOnly()]
        return [permissions.IsAuthenticated()]


class EventReviewListCreateView(generics.ListCreateAPIView):
    """–û—Ç–∑—ã–≤—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
    serializer_class = EventReviewSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        event_id = self.kwargs['event_id']
        return EventReview.objects.filter(event_id=event_id)

    def perform_create(self, serializer):
        event_id = self.kwargs['event_id']
        event = get_object_or_404(Event, id=event_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_review = EventReview.objects.filter(event=event, author=self.request.user).first()

        if existing_review:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.request.user.username}")
            existing_review.rating = serializer.validated_data['rating']
            existing_review.comment = serializer.validated_data.get('comment', '')
            existing_review.save()
            # –ó–∞–º–µ–Ω—è–µ–º instance –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            serializer.instance = existing_review
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
            print(f"‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.request.user.username}")
            serializer.save(event=event, author=self.request.user)


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def join_event(request, event_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é"""
    event = get_object_or_404(Event, id=event_id)
    user = request.user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
    if event.participants.filter(id=user.id).exists():
        return Response(
            {'error': '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'},
            status=status.HTTP_400_BAD_REQUEST
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if event.max_participants and event.participants_count >= event.max_participants:
        return Response(
            {'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'},
            status=status.HTTP_400_BAD_REQUEST
        )

    # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–∏–µ
    participation = EventParticipant.objects.create(
        event=event,
        user=user,
        status='registered' if event.requires_registration else 'confirmed'
    )

    serializer = EventParticipantSerializer(participation)
    return Response(serializer.data, status=status.HTTP_201_CREATED)


@api_view(['DELETE'])
@permission_classes([permissions.IsAuthenticated])
def leave_event(request, event_id):
    """–ü–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
    event = get_object_or_404(Event, id=event_id)
    user = request.user

    try:
        participation = EventParticipant.objects.get(event=event, user=user)
        participation.delete()
        return Response({'message': '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–æ–±—ã—Ç–∏–µ'}, status=status.HTTP_200_OK)
    except EventParticipant.DoesNotExist:
        return Response(
            {'error': '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'},
            status=status.HTTP_400_BAD_REQUEST
        )


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def create_event_from_post(request):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø–æ—Å—Ç–∞"""
    serializer = EventCreateFromPostSerializer(data=request.data, context={'request': request})
    if serializer.is_valid():
        event = serializer.save()
        response_serializer = EventDetailSerializer(event, context={'request': request})
        return Response(response_serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([permissions.IsAuthenticated])
def calendar_events(request):
    """–°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ –º–µ—Å—è—Ü–∞–º"""
    year = request.query_params.get('year', timezone.now().year)
    month = request.query_params.get('month', timezone.now().month)

    try:
        year = int(year)
        month = int(month)
    except (ValueError, TypeError):
        return Response(
            {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞'},
            status=status.HTTP_400_BAD_REQUEST
        )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü
    events = Event.objects.filter(
        start_datetime__year=year,
        start_datetime__month=month,
        is_public=True
    ).order_by('start_datetime')

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    calendar_data = {}
    for event in events:
        day = event.start_datetime.day
        if day not in calendar_data:
            calendar_data[day] = []

        calendar_data[day].append({
            'id': str(event.id),
            'title': event.title,
            'time': event.start_datetime.strftime('%H:%M'),
            'category': event.category,
            'location': event.location
        })

    return Response({
        'year': year,
        'month': month,
        'events': calendar_data
    })


class IsEventOrganizerOrReadOnly(permissions.BasePermission):
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""

    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True
        return obj.organizer == request.user
