#!/usr/bin/env python3
import requests
import json

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
BASE_URL = "http://192.168.1.73:8000/api"

def login_and_get_token():
    """–õ–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    print("üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    login_data = {
        "username": "testuser",  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        "password": "testpass123"
    }

    try:
        response = requests.post(f"{BASE_URL}/auth/login/", json=login_data)
        print(f"üîê –õ–æ–≥–∏–Ω: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}..." if token else "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return token
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")
        return None

def test_events_api_with_auth(token=None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–±—ã—Ç–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")

    headers = {}
    if token:
        headers['Authorization'] = f'Token {token}'

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    try:
        response = requests.get(f"{BASE_URL}/events/", headers=headers)
        print(f"üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
        if response.status_code == 200:
            events = response.json()
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
            if events:
                event_id = events[0]['id']
                print(f"   –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ID: {event_id}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {events[0].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                reviews_url = f"{BASE_URL}/events/{event_id}/reviews/"
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –æ—Ç–∑—ã–≤–æ–≤: {reviews_url}")

                reviews_response = requests.get(reviews_url, headers=headers)
                print(f"üìù –û—Ç–∑—ã–≤—ã —Å–æ–±—ã—Ç–∏—è: {reviews_response.status_code}")
                if reviews_response.status_code == 200:
                    reviews = reviews_response.json()
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
                    if token:
                        test_create_review(event_id, token)
                else:
                    print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {reviews_response.text}")

                return event_id
            else:
                print("   –°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return None

def test_create_review(event_id, token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    print(f"üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}...")

    headers = {
        'Authorization': f'Token {token}',
        'Content-Type': 'application/json'
    }

    review_data = {
        "rating": 5,
        "comment": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞"
    }

    reviews_url = f"{BASE_URL}/events/{event_id}/reviews/"
    print(f"üîó POST URL: {reviews_url}")
    print(f"üì¶ –î–∞–Ω–Ω—ã–µ: {review_data}")

    try:
        response = requests.post(reviews_url, json=review_data, headers=headers)
        print(f"üì° –û—Ç–≤–µ—Ç: {response.status_code} {response.reason}")
        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        if response.status_code == 201:
            print("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

def test_url_patterns():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")

    urls_to_test = [
        f"{BASE_URL}/",
        f"{BASE_URL}/events/",
        f"{BASE_URL}/auth/me/",
    ]

    for url in urls_to_test:
        try:
            response = requests.get(url)
            print(f"üì° {url}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {url}: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ URL
    test_url_patterns()

    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    token = login_and_get_token()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–±—ã—Ç–∏–π
    event_id = test_events_api_with_auth(token)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–æ–∑–¥–∞–ª–∏
    if token:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...")
        test_create_review("2db575f4-87b7-4efd-a8c0-c4e8410d91e0", token)

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
